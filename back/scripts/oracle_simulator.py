"""
ML Oracle Simulator for Water Management System

–°–∏–º—É–ª–∏—Ä—É–µ—Ç ML-–æ—Ä–∞–∫—É–ª, –∫–æ—Ç–æ—Ä—ã–π:
- –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç 10 —Ö–æ–∑—è–π—Å—Ç–≤ (—Ñ–µ—Ä–º)
- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –≤–æ–¥—ã
- –£—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è (–æ—Å–∞–¥–∫–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ)
- –°–∏–º—É–ª–∏—Ä—É–µ—Ç –¥–Ω–µ–≤–Ω—ã–µ/–Ω–æ—á–Ω—ã–µ —Ü–∏–∫–ª—ã
- –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ backend –∫–∞–∂–¥—ã–µ X –º–∏–Ω—É—Ç

–î–ª—è –¥–µ–º–æ –Ω–∞ —Ö–∞–∫–∞—Ç–æ–Ω–µ.
"""

import httpx
import random
import asyncio
from datetime import datetime
import logging
from typing import Dict
import os

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# Configuration
API_URL = os.getenv("API_URL", "http://localhost:8000/api/water-usage")
NUM_FARMS = 10

# –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ DEMO_MODE = True (30 —Å–µ–∫—É–Ω–¥)
# –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è DEMO_MODE = False (5 –º–∏–Ω—É—Ç)
DEMO_MODE = True

if DEMO_MODE:
    INTERVAL_SECONDS = 30  # 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–µ–º–æ
    INTERVAL_MINUTES = INTERVAL_SECONDS / 60
else:
    INTERVAL_MINUTES = 5  # 5 –º–∏–Ω—É—Ç –¥–ª—è production
    INTERVAL_SECONDS = INTERVAL_MINUTES * 60

# Farm profiles —Å —Ä–∞–∑–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
FARM_PROFILES = {
    1: {"name": "–ó–µ—Ä–Ω–æ–≤–∞—è —Ñ–µ—Ä–º–∞ A", "size_hectares": 50, "base_water": 150},
    2: {"name": "–û–≤–æ—â–Ω–∞—è —Ñ–µ—Ä–º–∞ B", "size_hectares": 30, "base_water": 200},
    3: {"name": "–§—Ä—É–∫—Ç–æ–≤—ã–π —Å–∞–¥ C", "size_hectares": 40, "base_water": 180},
    4: {"name": "–ó–µ—Ä–Ω–æ–≤–∞—è —Ñ–µ—Ä–º–∞ D", "size_hectares": 60, "base_water": 160},
    5: {"name": "–ñ–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—á–µ—Å–∫–∞—è —Ñ–µ—Ä–º–∞ E", "size_hectares": 35, "base_water": 220},
    6: {"name": "–û–≤–æ—â–Ω–∞—è —Ñ–µ—Ä–º–∞ F", "size_hectares": 25, "base_water": 190},
    7: {"name": "–ó–µ—Ä–Ω–æ–≤–∞—è —Ñ–µ—Ä–º–∞ G", "size_hectares": 55, "base_water": 170},
    8: {"name": "–§—Ä—É–∫—Ç–æ–≤—ã–π —Å–∞–¥ H", "size_hectares": 45, "base_water": 175},
    9: {"name": "–û–≤–æ—â–Ω–∞—è —Ñ–µ—Ä–º–∞ I", "size_hectares": 28, "base_water": 210},
    10: {"name": "–ó–µ—Ä–Ω–æ–≤–∞—è —Ñ–µ—Ä–º–∞ J", "size_hectares": 50, "base_water": 165},
}

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ñ–µ—Ä–º (–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω)
FARM_LOCATIONS = {
    1: (43.2220, 76.8512),
    2: (43.3050, 76.9100),
    3: (43.1900, 76.7800),
    4: (43.2580, 76.8950),
    5: (43.2100, 76.8200),
    6: (43.2800, 76.9200),
    7: (43.2400, 76.8700),
    8: (43.1950, 76.8350),
    9: (43.2650, 76.8850),
    10: (43.2150, 76.8450),
}


def get_time_of_day_multiplier() -> float:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫

    - –ù–æ—á—å (00:00-06:00): –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (0.3x)
    - –£—Ç—Ä–æ (06:00-10:00): —Å—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (0.8x)
    - –î–µ–Ω—å (10:00-18:00): –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (1.2x)
    - –í–µ—á–µ—Ä (18:00-00:00): —Å—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (0.7x)
    """
    hour = datetime.now().hour

    if 0 <= hour < 6:
        return 0.3  # –ù–æ—á—å - –º–∏–Ω–∏–º—É–º –ø–æ–ª–∏–≤–∞
    elif 6 <= hour < 10:
        return 0.8  # –£—Ç—Ä–æ - —Å—Ä–µ–¥–Ω–∏–π –ø–æ–ª–∏–≤
    elif 10 <= hour < 18:
        return 1.2  # –î–µ–Ω—å - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ–ª–∏–≤
    else:
        return 0.7  # –í–µ—á–µ—Ä - —Å—Ä–µ–¥–Ω–∏–π –ø–æ–ª–∏–≤


def simulate_weather() -> Dict[str, float]:
    """
    –°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è

    –õ–æ–≥–∏–∫–∞:
    - –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–∂–¥—å ‚Üí –º–µ–Ω—å—à–µ –Ω—É–∂–Ω–æ –ø–æ–ª–∏–≤–∞—Ç—å
    - –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ‚Üí –±–æ–ª—å—à–µ –Ω—É–∂–Ω–æ –≤–æ–¥—ã
    - –ù–∏–∑–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å ‚Üí –±–æ–ª—å—à–µ –Ω—É–∂–Ω–æ –≤–æ–¥—ã
    """
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–≥–æ–¥—É —Å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π
    has_rain = random.random() > 0.7  # 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è

    if has_rain:
        rainfall_mm = round(random.uniform(2, 15), 2)
        humidity_percent = round(random.uniform(60, 90), 1)
        temperature_c = round(random.uniform(15, 25), 1)
    else:
        rainfall_mm = 0.0
        humidity_percent = round(random.uniform(30, 70), 1)
        temperature_c = round(random.uniform(20, 35), 1)

    return {
        "rainfall_mm": rainfall_mm,
        "temperature_c": temperature_c,
        "humidity_percent": humidity_percent
    }


def calculate_water_consumption(
    farm_id: int,
    weather: Dict[str, float],
    time_multiplier: float
) -> float:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã

    –§–∞–∫—Ç–æ—Ä—ã:
    1. –ë–∞–∑–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Ñ–µ—Ä–º—ã (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞)
    2. –ü–æ–≥–æ–¥–∞ (–¥–æ–∂–¥—å —É–º–µ–Ω—å—à–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ)
    3. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–∂–∞—Ä–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ)
    4. –í–ª–∞–∂–Ω–æ—Å—Ç—å (—Å—É—Ö–æ—Å—Ç—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ)
    5. –í—Ä–µ–º—è —Å—É—Ç–æ–∫ (–¥–µ–Ω—å/–Ω–æ—á—å)
    """
    profile = FARM_PROFILES[farm_id]
    base_water = profile["base_water"]

    # 1. –ë–∞–∑–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ
    water = base_water * time_multiplier

    # 2. –í–ª–∏—è–Ω–∏–µ –¥–æ–∂–¥—è (–µ—Å–ª–∏ –¥–æ–∂–¥—å, –º–µ–Ω—å—à–µ –ø–æ–ª–∏–≤–∞–µ–º)
    if weather["rainfall_mm"] > 0:
        rain_reduction = min(0.5, weather["rainfall_mm"] / 20)  # –¥–æ 50% —Å–Ω–∏–∂–µ–Ω–∏—è
        water *= (1 - rain_reduction)

    # 3. –í–ª–∏—è–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (–∂–∞—Ä–∞ = –±–æ–ª—å—à–µ –≤–æ–¥—ã)
    if weather["temperature_c"] > 25:
        temp_increase = (weather["temperature_c"] - 25) * 0.03  # +3% –Ω–∞ –∫–∞–∂–¥—ã–π –≥—Ä–∞–¥—É—Å
        water *= (1 + temp_increase)

    # 4. –í–ª–∏—è–Ω–∏–µ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ (—Å—É—Ö–æ—Å—Ç—å = –±–æ–ª—å—à–µ –≤–æ–¥—ã)
    if weather["humidity_percent"] < 50:
        humidity_increase = (50 - weather["humidity_percent"]) * 0.02  # +2% –Ω–∞ –∫–∞–∂–¥—ã–π %
        water *= (1 + humidity_increase)

    # 5. –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä (¬±15%)
    random_factor = random.uniform(0.85, 1.15)
    water *= random_factor

    return round(water, 2)


def generate_water_usage_data(farm_id: int) -> dict:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –≤–æ–¥—ã –¥–ª—è —Ñ–µ—Ä–º—ã

    –£—á–∏—Ç—ã–≤–∞–µ—Ç:
    - –¢–∏–ø —Ñ–µ—Ä–º—ã –∏ –µ–µ —Ä–∞–∑–º–µ—Ä
    - –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    - –í—Ä–µ–º—è —Å—É—Ç–æ–∫
    - –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    """
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–≥–æ–¥—É
    weather = simulate_weather()

    # –ü–æ–ª—É—á–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
    time_multiplier = get_time_of_day_multiplier()

    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã
    water_liters = calculate_water_consumption(farm_id, weather, time_multiplier)

    return {
        "farm_id": farm_id,
        "timestamp": datetime.now().isoformat(),
        "water_liters": water_liters,
        "rainfall_mm": weather["rainfall_mm"],
        "temperature_c": weather["temperature_c"],
        "humidity_percent": weather["humidity_percent"],
    }


async def send_usage_data(client: httpx.AsyncClient, data: dict) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –≤–æ–¥—ã –≤ backend API"""
    try:
        response = await client.post(API_URL, json=data, timeout=10.0)
        response.raise_for_status()

        result = response.json()
        profile = FARM_PROFILES[data['farm_id']]

        logger.info(
            f"‚úì {profile['name']} (ID:{data['farm_id']}): "
            f"{data['water_liters']}L | "
            f"üå°Ô∏è{data['temperature_c']}¬∞C | "
            f"üíß{data['humidity_percent']}% | "
            f"üåßÔ∏è{data['rainfall_mm']}mm | "
            f"Tokens: {result['tokens_consumed']} | "
            f"TX: {result['solana_tx_id']}"
        )
        return True

    except httpx.HTTPError as e:
        logger.error(f"‚úó Farm {data['farm_id']}: Failed to send data - {e}")
        return False
    except Exception as e:
        logger.error(f"‚úó Farm {data['farm_id']}: Unexpected error - {e}")
        return False


async def run_oracle_simulation():
    """
    –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Å–∏–º—É–ª—è—Ü–∏–∏ ML-–æ—Ä–∞–∫—É–ª–∞

    –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –≤–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö —Ñ–µ—Ä–º
    """
    logger.info("=" * 80)
    logger.info("üåä ML Oracle Simulator Started")
    logger.info("=" * 80)
    logger.info(f"üìç Region: –ê–ª–º–∞—Ç–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω")
    logger.info(f"üöú Monitoring {NUM_FARMS} farms")
    logger.info(f"‚è∞ Sending data every {INTERVAL_MINUTES} minutes ({INTERVAL_SECONDS}s)")
    logger.info(f"üéØ Target API: {API_URL}")
    logger.info("=" * 80)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–µ—Ä–º
    logger.info("\nüìã Farm Profiles:")
    for farm_id, profile in FARM_PROFILES.items():
        logger.info(
            f"  {farm_id}. {profile['name']} - "
            f"{profile['size_hectares']}ha - "
            f"Base: {profile['base_water']}L/cycle"
        )
    logger.info("=" * 80)

    iteration = 0
    total_water_sent = 0.0

    async with httpx.AsyncClient(timeout=15.0) as client:
        while True:
            iteration += 1
            current_time = datetime.now()
            time_of_day = get_time_of_day_multiplier()

            logger.info(
                f"\nüìä Iteration #{iteration} - "
                f"{current_time.strftime('%Y-%m-%d %H:%M:%S')} - "
                f"Time multiplier: {time_of_day}x"
            )
            logger.info("-" * 80)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ñ–µ—Ä–º
            all_data = []
            for farm_id in range(1, NUM_FARMS + 1):
                data = generate_water_usage_data(farm_id)
                all_data.append(data)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            tasks = [send_usage_data(client, data) for data in all_data]
            results = await asyncio.gather(*tasks, return_exceptions=True)

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            success_count = sum(1 for r in results if r is True)
            total_water_this_round = sum(data["water_liters"] for data in all_data)
            total_water_sent += total_water_this_round

            # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
            logger.info("-" * 80)
            logger.info(
                f"‚úÖ Sent: {success_count}/{NUM_FARMS} farms | "
                f"üíß Water this round: {total_water_this_round:.1f}L | "
                f"üìà Total sent: {total_water_sent:.1f}L"
            )
            logger.info(f"‚è≥ Next update in {INTERVAL_MINUTES} minutes...")
            logger.info("=" * 80)

            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
            await asyncio.sleep(INTERVAL_SECONDS)


def main():
    """Entry point"""
    import asyncio

    try:
        asyncio.run(run_oracle_simulation())
    except KeyboardInterrupt:
        logger.info("\n\nüõë Oracle simulator stopped by user")
    except Exception as e:
        logger.error(f"\n\n‚ùå Oracle simulator crashed: {e}")


if __name__ == "__main__":
    main()
